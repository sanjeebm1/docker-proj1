name: Sanjeeb first pipeline

on:
  push:
    branches:
      - main

jobs:
  buildimage_pushto_ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # Specify your AWS region
      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}/alb-webapp-nginx
      - name: Calculate IMAGE_TAG
        run: |
            COMMIT_ID=$(echo ${GITHUB_SHA:0:7})
            BUILD_ID=$GITHUB_RUN_NUMBER
            IMAGE_TAG=$COMMIT_ID-$BUILD_ID
            echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Tag Docker image with ECR repository URL
        run: |
            docker tag my-docker-image ${{ secrets.AWS_ECR_REGISTRY }}/alb-webapp-nginx:latest
            docker tag my-docker-image ${{ secrets.AWS_ECR_REGISTRY }}/alb-webapp-nginx:${{ env.IMAGE_TAG }}
      - name: Push Docker image to ECR
        run: |
              docker push ${{ secrets.AWS_ECR_REGISTRY }}/alb-webapp-nginx:latest
              docker push ${{ secrets.AWS_ECR_REGISTRY }}/alb-webapp-nginx:${{ env.IMAGE_TAG }}
  myjobslinuxcmd: 
    runs-on: ubuntu-latest
    needs: ["buildimage_pushto_ecr"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Linux command
        run: |
          echo "Hello, GitHub Actions!"
          ls -la
          pwd
          mkdir sonziib
          ls -al
      - name: ssh to aws ec2 instance
        env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SSH_USER: ubuntu
            REMOTE_HOST: 3.129.67.247
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-private-key.pem
          chmod 600 ~/.ssh/ec2-private-key.pem 
          scp -i ~/.ssh/ec2-private-key.pem -o StrictHostKeyChecking=no docker-compose.yml $SSH_USER@$REMOTE_HOST:~/docker-compose-copy2.yml
          ssh -i ~/.ssh/ec2-private-key.pem -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST "ls -al && docker ps -a"
         